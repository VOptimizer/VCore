#include <iostream>
#include <VCore/VCore.hpp>
#include <fstream>
#include <chrono>

using namespace std;

void DummyMesher(VCore::VoxelMesh m, VCore::Loader Loader);

int main(int argc, char const *argv[])
{
    auto loader = VCore::ILoader::CreateAndLoad("Deer_moved.qbcl");
    auto loader1 = VCore::ILoader::CreateAndLoad("Deer_moved_higher.qbcl");
    auto loader2 = VCore::ILoader::CreateAndLoad("NewModel2.qbcl");
    auto loader3 = VCore::ILoader::CreateAndLoad("NewModel3.qbcl");

    // VCore::Loader GLoader(new VCore::CGoxelLoader());
    // GLoader->Load("windmill.gox");

    // VCore::Loader KLoader(new VCore::CKenshapeLoader());
    // KLoader->Load("bottle-potion.kenshape");

    // VCore::CVector v1(0, 0.5, 1);
    // VCore::CVector v2(0, -1, 0);
    // VCore::CVector v3(1, 1, 1);

    // VCore::CVector n = (v2 - v1).Cross(v3 - v1).Normalize(); 

    // auto res1 = v1.Length() * v1.Dot(n); //n * (v1.Dot(n) / n.Dot(n));
    // auto res2 = v2.Length() * v2.Dot(n); //n * (v2.Dot(n) / n.Dot(n));
    // auto res3 = v3.Length() * v3.Dot(n); //n * (v3.Dot(n) / n.Dot(n));

    // VCore::Loader loader(new VCore::CMagicaVoxelLoader());

    // auto start = chrono::system_clock::now();
    // loader->Load("windmill.vox");
    // auto end = chrono::system_clock::now();
    // auto LoadTime = end - start;

    // // VCore::CGreedyMesher Mesher;
    // VCore::CSimpleMesher Mesher;

    // auto VoxelMesh = loader->GetModels().back();//loader.GetModels().back();
    // cout << VoxelMesh->GetBlockCount() << endl;
    // VoxelMesh->RemeshAlways(true);

    // // start = chrono::system_clock::now();
    // // DummyMesher(VoxelMesh, loader);
    // // end = chrono::system_clock::now();
    // // auto DummyTime = end - start;

    // // auto v = VoxelMesh->GetVoxels();

    // //Pos.x + m_Size.x * Pos.y + m_Size.x * m_Size.y * Pos.z

    // // cout << "Front Bottom Left Backward (0, 0, 0): " << v[0 + 3 * 0 + 3 * 3 * 0]->Material << endl;
    // // cout << "Front Bottom Right Backward (2, 0, 0): " << v[2 + 3 * 0 + 3 * 3 * 0]->Material << endl;

    // // cout << "Front Bottom Left Forward (0, 2, 0): " << v[0 + 3 * 2 + 3 * 3 * 0]->Material << endl;
    // // cout << "Front Bottom Right Backward (2, 2, 0): " << v[2 + 3 * 2 + 3 * 3 * 0]->Material << endl;

    // // cout << "Front Top Left Backward (0, 0, 2): " << v[0 + 3 * 0 + 3 * 3 * 2]->Material << endl;
    // // cout << "Front Top Right Backward (2, 0, 2): " << v[2 + 3 * 0 + 3 * 3 * 2]->Material << endl;

    // // cout << "Front Top Left Forward (0, 2, 2): " << v[0 + 3 * 2 + 3 * 3 * 2]->Material << endl;
    // // cout << "Front Top Right Backward (2, 2, 2): " << v[2 + 3 * 2 + 3 * 3 * 2]->Material << endl;

    // // for (auto &&e : VoxelMesh->GetVoxels())
    // // {
    // //     cout << "Voxel: " << e->Pos.x << " " << e->Pos.y << " " << e->Pos.z << endl;
    // //     for (auto &&v : e->Normals)
    // //     {
    // //         cout << "\t" << v.x << " " << v.y << " " << v.z << endl;
    // //     }        
    // // }

    // start = chrono::system_clock::now();

    // auto voxels = loader->GetModels();
    // int counter = 0;

    // std::vector<VCore::Mesh> meshes;

    // for (auto &&v : voxels)
    // {
    //     // VCore::CWavefrontObjExporter exporterObj;
    //     // exporterObj.SetBinary(true);

    //     v->RemeshAlways(true);

    //     auto Meshes = Mesher.GenerateMeshes(v, loader);
    //     auto Mesh = Meshes.begin()->second; 
    //     meshes.push_back(Mesh);


    //     // exporterObj.Save(std::to_string(counter) + ".glb", Mesh);
    //     // counter++;
    // }

    // VCore::CMarchingCubesMesher mc;
    // auto mcMesh = mc.GenerateMeshes(voxels.front(), loader);
    
    // end = chrono::system_clock::now();
    // auto RealTime = end - start;

    // VCore::CWavefrontObjExporter objExporter;
    // VCore::CPLYExporter plyExporter;
    // VCore::CGLTFExporter gltfExporter;
    // VCore::CGodotSceneExporter escnExporter;

    // objExporter.Settings()->WorldSpace = false;
    // gltfExporter.Settings()->WorldSpace = true;
    // escnExporter.Settings()->WorldSpace = true;
    // plyExporter.Settings()->WorldSpace = true;

    // objExporter.Save("object_rot.obj", meshes);
    // gltfExporter.Save("object_rot.gltf", meshes);
    // escnExporter.Save("object_rot.esn", meshes);
    // plyExporter.Save("object_rot.ply", meshes);

    // objExporter.Settings()->WorldSpace = false;
    // objExporter.Save("mc.obj", mcMesh.begin()->second);

    // gltfExporter.Settings()->WorldSpace = false;
    // gltfExporter.Save("mc.gltf", mcMesh.begin()->second);

    // auto mesh = VCore::Mesh(new VCore::SMesh());

    // // mesh->Vertices.push_back(VCore::CVector(-0.5, 0.5, 0));
    // // mesh->Vertices.push_back(VCore::CVector(0, 0.5, 0));
    // // mesh->Vertices.push_back(VCore::CVector(0.5, 0.5, 0));

    // // mesh->Vertices.push_back(VCore::CVector(-0.5, 0, 0));
    // // mesh->Vertices.push_back(VCore::CVector(0, 0, 0));
    // // mesh->Vertices.push_back(VCore::CVector(0.5, 0, 0));

    // // mesh->Vertices.push_back(VCore::CVector(-0.5, -0.5, 0));
    // // mesh->Vertices.push_back(VCore::CVector(0, -0.5, 0));
    // // mesh->Vertices.push_back(VCore::CVector(0.5, -0.5, 0));

    // // mesh->UVs.push_back(VCore::CVector(0, 0, 0));
    // // mesh->Normals.push_back(VCore::CVector(0, 0, 1));
    // // mesh->Texture.push_back(VCore::CColor(1, 0, 0, 0));
    // // mesh->Faces.push_back(VCore::GroupedFaces(new VCore::SGroupedFaces()));

    // // mesh->Faces[0]->FaceMaterial = 0;
    // // mesh->Faces[0]->FaceMaterial = VCore::Material(new VCore::CMaterial());
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(1, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(2, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(4, 1, 1));

    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(2, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(5, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(4, 1, 1));

    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(2, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(3, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(5, 1, 1));

    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(3, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(6, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(5, 1, 1));

    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(4, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(5, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(7, 1, 1));

    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(5, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(8, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(7, 1, 1));

    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(5, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(6, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(8, 1, 1));

    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(6, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(9, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(8, 1, 1));




    // mesh->Vertices.push_back(VCore::CVector(-0.5, 0.5, 0));
    // mesh->Vertices.push_back(VCore::CVector(0, 0.5, 0));
    // mesh->Vertices.push_back(VCore::CVector(0.5, 0.5, 0));
    // mesh->Vertices.push_back(VCore::CVector(1, 0.5, 0));

    // mesh->Vertices.push_back(VCore::CVector(-0.5, 0, 0));
    // mesh->Vertices.push_back(VCore::CVector(0, 0, 0));
    // mesh->Vertices.push_back(VCore::CVector(0.5, 0, 0));
    // mesh->Vertices.push_back(VCore::CVector(1, 0, 0));

    // mesh->Vertices.push_back(VCore::CVector(-0.5, -0.5, 0));
    // mesh->Vertices.push_back(VCore::CVector(0, -0.5, 0));
    // mesh->Vertices.push_back(VCore::CVector(0.5, -0.5, 0));
    // mesh->Vertices.push_back(VCore::CVector(1, -0.5, 0));

    // mesh->Vertices.push_back(VCore::CVector(-0.5, -1, 0));
    // mesh->Vertices.push_back(VCore::CVector(0, -1, 0));
    // mesh->Vertices.push_back(VCore::CVector(0.5, -1, 0));
    // mesh->Vertices.push_back(VCore::CVector(1, -1, 0));

    // mesh->UVs.push_back(VCore::CVector(0, 0, 0));
    // mesh->Normals.push_back(VCore::CVector(0, 0, 1));
    // mesh->Texture.push_back(VCore::CColor(1, 0, 0, 0));
    // mesh->Faces.push_back(VCore::GroupedFaces(new VCore::SGroupedFaces()));

    // mesh->Faces[0]->FaceMaterial = 0;
    // mesh->Faces[0]->FaceMaterial = VCore::Material(new VCore::CMaterial());
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(1, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(2, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(5, 1, 1));

    // mesh->Faces[0]->Indices.push_back(VCore::CVector(2, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(6, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(5, 1, 1));

    // mesh->Faces[0]->Indices.push_back(VCore::CVector(2, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(3, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(6, 1, 1));

    // mesh->Faces[0]->Indices.push_back(VCore::CVector(3, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(7, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(6, 1, 1));

    // mesh->Faces[0]->Indices.push_back(VCore::CVector(3, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(4, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(7, 1, 1));

    // mesh->Faces[0]->Indices.push_back(VCore::CVector(4, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(8, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(7, 1, 1));

    // mesh->Faces[0]->Indices.push_back(VCore::CVector(5, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(6, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(9, 1, 1));

    // mesh->Faces[0]->Indices.push_back(VCore::CVector(6, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(10, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(9, 1, 1));

    // //6
    // //10
    // //7
    // //11

    // mesh->Faces[0]->Indices.push_back(VCore::CVector(7, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(8, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(11, 1, 1));

    // mesh->Faces[0]->Indices.push_back(VCore::CVector(8, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(12, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(11, 1, 1));

    // mesh->Faces[0]->Indices.push_back(VCore::CVector(9, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(10, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(13, 1, 1));

    // mesh->Faces[0]->Indices.push_back(VCore::CVector(10, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(14, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(13, 1, 1));

    // mesh->Faces[0]->Indices.push_back(VCore::CVector(10, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(11, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(14, 1, 1));

    // mesh->Faces[0]->Indices.push_back(VCore::CVector(11, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(15, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(14, 1, 1));

    // mesh->Faces[0]->Indices.push_back(VCore::CVector(11, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(12, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(15, 1, 1));

    // mesh->Faces[0]->Indices.push_back(VCore::CVector(12, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(16, 1, 1));
    // mesh->Faces[0]->Indices.push_back(VCore::CVector(15, 1, 1));



    // // mesh->Vertices.push_back(VCore::CVector(-3.000000, 0.000000, 0.000000));
    // // mesh->Vertices.push_back(VCore::CVector(-3.000000, 0.000000, 1.000000));
    // // mesh->Vertices.push_back(VCore::CVector(-2.000000, 0.000000, 1.000000));
    // // mesh->Vertices.push_back(VCore::CVector(-2.000000, 0.000000, 0.000000));
    // // mesh->Vertices.push_back(VCore::CVector(-3.000000, 0.000000, -1.000000));
    // // mesh->Vertices.push_back(VCore::CVector(-2.000000, 0.000000, -1.000000));
    // // mesh->Vertices.push_back(VCore::CVector(-2.000000, 0.000000, 2.000000));
    // // mesh->Vertices.push_back(VCore::CVector(-1.000000, 0.000000, 2.000000));
    // // mesh->Vertices.push_back(VCore::CVector(-1.000000, 0.000000, 1.000000));
    // // mesh->Vertices.push_back(VCore::CVector(-1.000000, 0.000000, 0.000000));
    // // mesh->Vertices.push_back(VCore::CVector(-1.000000, 0.000000, -1.000000));
    // // mesh->Vertices.push_back(VCore::CVector(-2.000000, 0.000000, -2.000000));
    // // mesh->Vertices.push_back(VCore::CVector(-1.000000, 0.000000, -2.000000));
    // // mesh->Vertices.push_back(VCore::CVector(-1.000000, 0.000000, 3.000000));
    // // mesh->Vertices.push_back(VCore::CVector(0.000000, 0.000000, 3.000000));
    // // mesh->Vertices.push_back(VCore::CVector(0.000000, 0.000000, 2.000000));
    // // mesh->Vertices.push_back(VCore::CVector(0.000000, 0.000000, 1.000000));
    // // mesh->Vertices.push_back(VCore::CVector(0.000000, 0.000000, 0.000000));
    // // mesh->Vertices.push_back(VCore::CVector(0.000000, 0.000000, -1.000000));
    // // mesh->Vertices.push_back(VCore::CVector(0.000000, 0.000000, -2.000000));
    // // mesh->Vertices.push_back(VCore::CVector(-1.000000, 0.000000, -3.000000));
    // // mesh->Vertices.push_back(VCore::CVector(0.000000, 0.000000, -3.000000));
    // // mesh->Vertices.push_back(VCore::CVector(1.000000, 0.000000, 3.000000));
    // // mesh->Vertices.push_back(VCore::CVector(1.000000, 0.000000, 2.000000));
    // // mesh->Vertices.push_back(VCore::CVector(1.000000, 0.000000, 1.000000));
    // // mesh->Vertices.push_back(VCore::CVector(1.000000, 0.000000, 0.000000));
    // // mesh->Vertices.push_back(VCore::CVector(1.000000, 0.000000, -1.000000));
    // // mesh->Vertices.push_back(VCore::CVector(1.000000, 0.000000, -2.000000));
    // // mesh->Vertices.push_back(VCore::CVector(1.000000, 0.000000, -3.000000));
    // // mesh->Vertices.push_back(VCore::CVector(2.000000, 0.000000, 2.000000));
    // // mesh->Vertices.push_back(VCore::CVector(2.000000, 0.000000, 1.000000));
    // // mesh->Vertices.push_back(VCore::CVector(2.000000, 0.000000, 0.000000));
    // // mesh->Vertices.push_back(VCore::CVector(2.000000, 0.000000, -1.000000));
    // // mesh->Vertices.push_back(VCore::CVector(2.000000, 0.000000, -2.000000));
    // // mesh->Vertices.push_back(VCore::CVector(3.000000, 0.000000, 1.000000));
    // // mesh->Vertices.push_back(VCore::CVector(3.000000, 0.000000, 0.000000));
    // // mesh->Vertices.push_back(VCore::CVector(3.000000, 0.000000, -1.000000));

    // // mesh->UVs.push_back(VCore::CVector(0.500000, 0.500000, 0));
    // // mesh->Normals.push_back(VCore::CVector(0, 1, 0));
    // // mesh->Texture.push_back(VCore::CColor(1, 0, 0, 0));
    // // mesh->Faces.push_back(VCore::GroupedFaces(new VCore::SGroupedFaces()));

    // // mesh->Faces[0]->FaceMaterial = 0;
    // // mesh->Faces[0]->FaceMaterial = VCore::Material(new VCore::CMaterial());

    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(1, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(2, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(3, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(1, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(3, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(4, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(5, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(1, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(4, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(5, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(4, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(6, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(3, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(7, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(8, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(3, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(8, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(9, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(4, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(3, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(9, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(4, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(9, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(10, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(6, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(4, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(10, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(6, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(10, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(11, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(12, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(6, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(11, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(12, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(11, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(13, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(8, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(14, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(15, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(8, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(15, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(16, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(9, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(8, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(16, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(9, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(16, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(17, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(10, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(9, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(17, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(10, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(17, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(18, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(11, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(10, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(18, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(11, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(18, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(19, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(13, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(11, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(19, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(13, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(19, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(20, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(21, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(13, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(20, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(21, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(20, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(22, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(16, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(15, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(23, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(16, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(23, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(24, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(17, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(16, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(24, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(17, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(24, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(25, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(18, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(17, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(25, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(18, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(25, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(26, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(19, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(18, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(26, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(19, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(26, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(27, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(20, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(19, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(27, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(20, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(27, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(28, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(22, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(20, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(28, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(22, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(28, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(29, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(25, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(24, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(30, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(25, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(30, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(31, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(26, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(25, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(31, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(26, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(31, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(32, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(27, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(26, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(32, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(27, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(32, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(33, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(28, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(27, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(33, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(28, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(33, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(34, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(32, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(31, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(35, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(32, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(35, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(36, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(33, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(32, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(36, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(33, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(36, 1, 1));
    // // mesh->Faces[0]->Indices.push_back(VCore::CVector(37, 1, 1));


    // gltfExporter.Settings()->WorldSpace = false;
    // gltfExporter.Save("face.gltf", mesh);

    // VCore::CVerticesReducer reducer;
    // auto reducedMesh = reducer.Reduce(mcMesh.begin()->second);//mcMesh.begin()->second); //meshes.front()); //mcMesh.begin()->second);//meshes.front()); //mesh);//

    // gltfExporter.Settings()->WorldSpace = false;
    // gltfExporter.Save("reduced.gltf", reducedMesh);

    // cout << "Load: " << std::chrono::duration_cast<std::chrono::milliseconds>(LoadTime).count() << endl;
    // // cout << "Dummy: " << std::chrono::duration_cast<std::chrono::milliseconds>(DummyTime).count() << endl;
    // cout << "Real: " << std::chrono::duration_cast<std::chrono::milliseconds>(RealTime).count() << endl;

    // Mesh = VCore::Mesh(new VCore::SMesh());

    // Mesh->Vertices.push_back()

    // VCore::CWavefrontObjExporter exporter1;
    // exporter1.SaveObj("minicube.obj", Mesh);

    // VCore::CGLTFExporter exporter;

    // // exporter.Save("lantern.gltf", Mesh);
    // exporter.Save("windmill.glb", Mesh);

    // VCore::CWavefrontObjExporter exporterObj;

    // // exporter.Save("lantern.gltf", Mesh);
    // exporterObj.Save("windmill.obj", Mesh);

    // // VCore::CSpriteStackingExporter spriter;
    // // spriter.Save("windmill_sprite.png", VoxelMesh, KLoader);

    // VCore::CGodotSceneExporter godot;
    // godot.Save("windmill_2.escn", Mesh);

    return 0;
}

void DummyMesher(VCore::VoxelMesh m, VCore::Loader Loader)
{
    auto Voxels = m->GetVoxels();
    auto BBox = m->GetBBox();
    VCore::CVector Beg = BBox.Beg;
    std::swap(Beg.y, Beg.z);

    VCore::CVector BoxCenter = BBox.GetSize() / 2;
    std::swap(BoxCenter.y, BoxCenter.z);

    for (auto &&pair : Voxels)
    {          
        VCore::Voxel v = pair.second;

        if(v && v->IsVisible())
        {
            for (char i = 0; i < v->Normals.size(); i++)
            {
                // Invisible
                if(v->Normals[i] == VCore::CVector(0, 0, 0))
                    continue;

                VCore::CVector v1, v2, v3, v4, Normal = v->Normals[i];
                std::swap(Normal.y, Normal.z);
                
                switch (i)
                {
                    case VCore::CVoxel::Direction::UP:
                    case VCore::CVoxel::Direction::DOWN:
                    {
                        float PosZ = v->Normals[i].z < 0 ? 0 : v->Normals[i].z;

                        v1 = VCore::CVector(v->Pos.x, v->Pos.z + PosZ, v->Pos.y + 1.f) - BoxCenter;
                        v2 = VCore::CVector(v->Pos.x, v->Pos.z + PosZ, v->Pos.y) - BoxCenter;
                        v3 = VCore::CVector(v->Pos.x + 1.f, v->Pos.z + PosZ, v->Pos.y) - BoxCenter;
                        v4 = VCore::CVector(v->Pos.x + 1.f, v->Pos.z + PosZ, v->Pos.y + 1.f) - BoxCenter;
                    }break;

                    case VCore::CVoxel::Direction::LEFT:
                    case VCore::CVoxel::Direction::RIGHT:
                    {
                        float Posx = v->Normals[i].x < 0 ? 0 : v->Normals[i].x;

                        v1 = VCore::CVector(v->Pos.x + Posx, v->Pos.z, v->Pos.y) - BoxCenter;
                        v2 = VCore::CVector(v->Pos.x + Posx, v->Pos.z, v->Pos.y + 1.f) - BoxCenter;
                        v3 = VCore::CVector(v->Pos.x + Posx, v->Pos.z + 1.f, v->Pos.y + 1.f) - BoxCenter;
                        v4 = VCore::CVector(v->Pos.x + Posx, v->Pos.z + 1.f, v->Pos.y) - BoxCenter;
                    }break;

                    case VCore::CVoxel::Direction::FORWARD:
                    case VCore::CVoxel::Direction::BACKWARD:
                    {
                        float PosY = v->Normals[i].y < 0 ? 0 : v->Normals[i].y;

                        v1 = VCore::CVector(v->Pos.x, v->Pos.z + 1.f, v->Pos.y + PosY) - BoxCenter;
                        v2 = VCore::CVector(v->Pos.x, v->Pos.z, v->Pos.y + PosY) - BoxCenter;
                        v3 = VCore::CVector(v->Pos.x + 1.f, v->Pos.z, v->Pos.y + PosY) - BoxCenter;
                        v4 = VCore::CVector(v->Pos.x + 1.f, v->Pos.z + 1.f, v->Pos.y + PosY) - BoxCenter;
                    }break;
                }

                // AddFace(Ret, v1 - Beg, v2 - Beg, v3 - Beg, v4 - Beg, Normal, v->Color, v->Material);
            }
        }
    }

    // ClearCache();
    // return Ret;
}